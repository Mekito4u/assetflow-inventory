import os
import sys
from django.core.management.base import BaseCommand
from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType
from inventory.models import DeviceType, Employee, Device, Request


class Command(BaseCommand):
    help = '–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ AssetFlow'

    def handle(self, *args, **options):
        self.stdout.write('üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è...')

        # 1. –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–∞–≤–∞
        self.create_groups()

        # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.create_sample_data()

        self.stdout.write(
            self.style.SUCCESS('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!')
        )

    def create_groups(self):
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏"""

        # –ì—Ä—É–ø–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —É—á–µ—Ç–∞
        admin_group, created = Group.objects.get_or_create(
            name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É—á–µ—Ç–∞'
        )

        # –ì—Ä—É–ø–ø–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
        tech_group, created = Group.objects.get_or_create(
            name='–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã'
        )

        self.stdout.write('‚úÖ –ì—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω—ã')

    def create_sample_data(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"""

        # –¢–∏–ø—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        laptop_type, _ = DeviceType.objects.get_or_create(
            name='–ù–æ—É—Ç–±—É–∫',
            defaults={'description': '–ú–æ–±–∏–ª—å–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã'}
        )
        monitor_type, _ = DeviceType.objects.get_or_create(
            name='–ú–æ–Ω–∏—Ç–æ—Ä',
            defaults={'description': '–î–∏—Å–ø–ª–µ–∏ –¥–ª—è —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π'}
        )

        # –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
        ivanov, _ = Employee.objects.get_or_create(
            full_name='–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
            defaults={
                'position': '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
                'department': 'IT',
                'email': 'i.ivanov@company.ru'
            }
        )

        petrova, _ = Employee.objects.get_or_create(
            full_name='–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞',
            defaults={
                'position': '–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫',
                'department': 'QA',
                'email': 'a.petrova@company.ru'
            }
        )

        # –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
        laptop1, _ = Device.objects.get_or_create(
            inventory_number='NB001',
            defaults={
                'model': 'Dell Latitude 5520',
                'device_type': laptop_type,
                'status': 'available'
            }
        )

        monitor1, _ = Device.objects.get_or_create(
            inventory_number='MON001',
            defaults={
                'model': 'Samsung S24R350',
                'device_type': monitor_type,
                'status': 'available'
            }
        )

        # –ó–∞—è–≤–∫–∏
        request1, _ = Request.objects.get_or_create(
            employee=ivanov,
            device=laptop1,
            defaults={
                'status': 'approved',
                'purpose': '–î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞'
            }
        )

        self.stdout.write('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã')
        self.stdout.write('')
        self.stdout.write('üìä –°–æ–∑–¥–∞–Ω–æ:')
        self.stdout.write(f'   - –¢–∏–ø–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {DeviceType.objects.count()}')
        self.stdout.write(f'   - –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {Employee.objects.count()}')
        self.stdout.write(f'   - –£—Å—Ç—Ä–æ–π—Å—Ç–≤: {Device.objects.count()}')
        self.stdout.write(f'   - –ó–∞—è–≤–æ–∫: {Request.objects.count()}')